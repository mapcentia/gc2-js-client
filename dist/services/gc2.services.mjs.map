{"version":3,"sources":["../../src/services/gc2.services.ts"],"sourcesContent":["import axios, {AxiosError, AxiosInstance, AxiosRequestConfig} from 'axios'\r\nimport * as querystring from 'querystring'\r\nimport {Options} from \"../util/utils\";\r\n\r\n\r\ntype GetDeviceCodeResponse = {\r\n    device_code: string;\r\n    user_code: string;\r\n    verification_uri: string;\r\n    verification_uri_complete?: string;\r\n    expires_in: number;\r\n    interval: number;\r\n};\r\n\r\ntype GetTokenResponse = {\r\n    access_token: string;\r\n    expires_in: number;\r\n    refresh_expires_in: number;\r\n    refresh_token: string;\r\n    token_type: string;\r\n    'not-before-policy': number;\r\n    session_state: string;\r\n    scope: string;\r\n};\r\n\r\ntype GetUserInfoResponse = {\r\n    sub: string;\r\n    email_verified: boolean;\r\n    name: string;\r\n    preferred_username: string;\r\n    given_name: string;\r\n    family_name: string;\r\n    email: string;\r\n};\r\n\r\nexport class Gc2Service {\r\n    http: AxiosInstance\r\n    options: Options\r\n\r\n    constructor(options: Options) {\r\n        this.options = options\r\n        this.http = axios.create({\r\n            baseURL: this.options.host\r\n        })\r\n    }\r\n\r\n    async getDeviceCode(): Promise<GetDeviceCodeResponse> {\r\n        const {data} = await this.http.post(\r\n            `/api/v4/oauth/device`,\r\n            {\r\n                client_id: this.options.clientId,\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            },\r\n        )\r\n        return data\r\n    }\r\n\r\n    async poolToken(deviceCode: string, interval: number): Promise<GetTokenResponse> {\r\n        const getToken = () =>\r\n            this.http\r\n                .post(\r\n                    '/api/v4/oauth',\r\n                    {\r\n                        client_id: this.options.clientId,\r\n                        device_code: deviceCode,\r\n                        grant_type: 'device_code',\r\n                    },\r\n                    {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                    },\r\n                )\r\n                .then(({data}) => data)\r\n                .catch(error => {\r\n                    if (error instanceof AxiosError) {\r\n                        const err = error.response?.data\r\n                        if (err.error === 'authorization_pending') {\r\n                            return null\r\n                        } else {\r\n                            return err.error_description\r\n                        }\r\n                    }\r\n                })\r\n\r\n        let response = await getToken()\r\n\r\n        while (response === null) {\r\n            response = await new Promise(resolve => {\r\n                setTimeout(async () => {\r\n                    resolve(await getToken())\r\n                }, interval * 1100) // interval equal to 1 is equivalent to 1.1 seconds between one request and another\r\n            })\r\n        }\r\n\r\n\r\n        return response\r\n    }\r\n\r\n    getAuthorizationCodeURL(codeChallenge: string, state: string): string {\r\n        const queryParams = querystring.stringify({\r\n            response_type: 'code',\r\n            client_id: this.options.clientId,\r\n            redirect_uri: this.options.redirectUri,\r\n            state,\r\n            code_challenge: codeChallenge,\r\n            code_challenge_method: 'S256',\r\n        })\r\n        return `${this.options.host}/auth/?${queryParams}`\r\n    }\r\n\r\n    async getAuthorizationCodeToken(code: string | string[], codeVerifier: string | null): Promise<GetTokenResponse> {\r\n        return this.http\r\n            .post(\r\n                `/api/v4/oauth`,\r\n                {\r\n                    client_id: this.options.clientId,\r\n                    redirect_uri: this.options.redirectUri,\r\n                    grant_type: 'authorization_code',\r\n                    code,\r\n                    code_verifier: codeVerifier,\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                },\r\n            )\r\n            .then(({data}) => data).catch(err => {\r\n                throw new Error(err.message)\r\n            })\r\n    }\r\n\r\n    // TODO use v4 when all has updated GC2\r\n    async getPasswordToken(username: string, password: string, database: string): Promise<GetTokenResponse> {\r\n        return this.http\r\n            .post(\r\n                `/api/v3/oauth/token`,\r\n                {\r\n                    client_id: this.options.clientId,\r\n                    grant_type: 'password',\r\n                    username,\r\n                    password,\r\n                    database,\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                },\r\n            )\r\n            .then(({data}) => data)\r\n    }\r\n\r\n    async getRefreshToken(token: string): Promise<GetTokenResponse> {\r\n        return this.http\r\n            .post(\r\n                `/api/v4/oauth`,\r\n                {\r\n                    client_id: this.options.clientId,\r\n                    grant_type: 'refresh_token',\r\n                    refresh_token: token\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                },\r\n            ).then(({data}) => data).catch(err => {\r\n            })\r\n    }\r\n}\r\n"],"mappings":"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","names":[]}