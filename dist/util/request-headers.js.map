{"version":3,"sources":["../../src/util/request-headers.ts","../../src/util/utils.ts","../../src/services/gc2.services.ts"],"sourcesContent":["/**\r\n * @author     Martin HÃ¸gh <mh@mapcentia.com>\r\n * @copyright  2013-2024 MapCentia ApS\r\n * @license    http://www.gnu.org/licenses/#AGPL  GNU AFFERO GENERAL PUBLIC LICENSE 3\r\n *\r\n */\r\n\r\nimport {getOptions, getTokens, isLogin} from \"./utils\";\r\nimport {Gc2Service} from \"../services/gc2.services\";\r\n\r\nconst getHeaders = async (contentType: string|null = 'application/json'): Promise<any>=> {\r\n  type headers = {\r\n    Accept: string,\r\n    Cookie: string,\r\n    Authorization: string|null,\r\n    'Content-Type'?: string\r\n  }\r\n\r\n  const options = getOptions()\r\n  const service = new Gc2Service(options)\r\n\r\n  // We check is token needs refreshing\r\n  if (!await isLogin(service)) {\r\n    return Promise.reject('Is not logged in')\r\n  }\r\n\r\n  const {accessToken} = getTokens()\r\n\r\n  const headers: headers = {\r\n    Accept: 'application/json',\r\n    Cookie: 'XDEBUG_SESSION=XDEBUG_ECLIPSE',\r\n    Authorization: accessToken ? 'Bearer ' + accessToken : null,\r\n  }\r\n  if (contentType) {\r\n    headers['Content-Type'] = contentType\r\n  }\r\n  return headers\r\n}\r\nexport default getHeaders\r\n\r\n","import {jwtDecode} from 'jwt-decode'\r\nimport {Gc2Service} from \"../services/gc2.services\";\r\n\r\nexport type Tokens = {\r\n    accessToken: string;\r\n    refreshToken: string;\r\n};\r\n\r\nexport type Options = {\r\n    redirectUri: string,\r\n    clientId: string,\r\n    host: string,\r\n}\r\n\r\nexport const generatePkceChallenge = async () => {\r\n\r\n    const generateRandomString = () => {\r\n        const array = new Uint32Array(28);\r\n        crypto.getRandomValues(array);\r\n        return Array.from(array, dec => ('0' + dec.toString(16)).substr(-2)).join('');\r\n    }\r\n\r\n    const sha256 = (plain: string | undefined) => {\r\n        const encoder = new TextEncoder();\r\n        const data = encoder.encode(plain);\r\n        return crypto.subtle.digest('SHA-256', data);\r\n    }\r\n\r\n    const base64urlencode = (str: ArrayBuffer) => {\r\n\r\n        return btoa(String.fromCharCode.apply(null, [...new Uint8Array(str)]))\r\n            .replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\r\n    }\r\n\r\n    async function pkceChallengeFromVerifier(v: string | undefined) {\r\n        const hashed = await sha256(v);\r\n        return base64urlencode(hashed);\r\n    }\r\n\r\n    const {state, codeVerifier} = {\r\n        state: generateRandomString(),\r\n        codeVerifier: generateRandomString(),\r\n    };\r\n    const codeChallenge = await pkceChallengeFromVerifier(codeVerifier);\r\n\r\n    return {\r\n        state,\r\n        codeVerifier,\r\n        codeChallenge,\r\n    }\r\n}\r\n\r\nexport const isTokenExpired = (token: string): boolean => {\r\n    let isJwtExpired = false\r\n    const {exp} = jwtDecode(token)\r\n    const currentTime = new Date().getTime() / 1000\r\n\r\n    if (exp) {\r\n        if (currentTime > exp) isJwtExpired = true\r\n    }\r\n    return isJwtExpired\r\n}\r\n\r\nexport const passwordIsStrongEnough = (password: string, allowNull: boolean = false) => {\r\n    const message = 'Entered password is too weak'\r\n    if (password === '' && allowNull) return true\r\n    if (password.length < 8) return message\r\n    if (!(/[A-Z]/.test(password))) return message\r\n    if (!(/[a-z]/.test(password))) return message\r\n    if (!(/\\d/.test(password))) return message\r\n    return true\r\n}\r\n\r\nexport const isLogin = async (gc2: Gc2Service) => {\r\n    const accessToken = localStorage.getItem('accessToken')\r\n    const refreshToken = localStorage.getItem('refreshToken')\r\n    if (!accessToken && !refreshToken) {\r\n        return false\r\n    }\r\n    if (!accessToken || (accessToken && isTokenExpired(accessToken))) {\r\n        if (refreshToken && isTokenExpired(refreshToken)) {\r\n            console.error('Refresh token has expired. Please login again')\r\n            return false\r\n        }\r\n        if (refreshToken) {\r\n            try {\r\n                const data = await gc2.getRefreshToken(refreshToken)\r\n                setTokens({accessToken: data.access_token, refreshToken})\r\n                console.log('Access token refreshed')\r\n            } catch (e) {\r\n                console.error('Could not get refresh token')\r\n                return false\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nexport const setTokens = (tokens: Tokens) => {\r\n    localStorage.setItem('accessToken', tokens.accessToken)\r\n    localStorage.setItem('refreshToken', tokens.refreshToken)\r\n}\r\n\r\nexport const setOptions = (options: Options ) => {\r\n    if (options.clientId) localStorage.setItem('clientId', options.clientId)\r\n    if (options.host) localStorage.setItem('host', options.host)\r\n    if (options.redirectUri) localStorage.setItem('redirectUri', options.redirectUri)\r\n}\r\n\r\nexport const getTokens = (): Tokens => {\r\n    return {\r\n        accessToken: localStorage.getItem('accessToken') || '',\r\n        refreshToken: localStorage.getItem('refreshToken') || '',\r\n    }\r\n}\r\nexport const getOptions = (): Options => {\r\n    return {\r\n        clientId: localStorage.getItem('clientId') || '',\r\n        host: localStorage.getItem('host') || '',\r\n        redirectUri: localStorage.getItem('redirectUri') || '',\r\n    }\r\n}\r\n\r\n\r\n","import axios, {AxiosError, AxiosInstance, AxiosRequestConfig} from 'axios'\r\nimport * as querystring from 'querystring'\r\nimport {Options} from \"../util/utils\";\r\n\r\n\r\ntype GetDeviceCodeResponse = {\r\n    device_code: string;\r\n    user_code: string;\r\n    verification_uri: string;\r\n    verification_uri_complete?: string;\r\n    expires_in: number;\r\n    interval: number;\r\n};\r\n\r\ntype GetTokenResponse = {\r\n    access_token: string;\r\n    expires_in: number;\r\n    refresh_expires_in: number;\r\n    refresh_token: string;\r\n    token_type: string;\r\n    'not-before-policy': number;\r\n    session_state: string;\r\n    scope: string;\r\n};\r\n\r\ntype GetUserInfoResponse = {\r\n    sub: string;\r\n    email_verified: boolean;\r\n    name: string;\r\n    preferred_username: string;\r\n    given_name: string;\r\n    family_name: string;\r\n    email: string;\r\n};\r\n\r\nexport class Gc2Service {\r\n    http: AxiosInstance\r\n    options: Options\r\n\r\n    constructor(options: Options) {\r\n        this.options = options\r\n        this.http = axios.create({\r\n            baseURL: this.options.host\r\n        })\r\n    }\r\n\r\n    async getDeviceCode(): Promise<GetDeviceCodeResponse> {\r\n        const {data} = await this.http.post(\r\n            `/api/v4/oauth/device`,\r\n            {\r\n                client_id: this.options.clientId,\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            },\r\n        )\r\n        return data\r\n    }\r\n\r\n    async poolToken(deviceCode: string, interval: number): Promise<GetTokenResponse> {\r\n        const getToken = () =>\r\n            this.http\r\n                .post(\r\n                    '/api/v4/oauth',\r\n                    {\r\n                        client_id: this.options.clientId,\r\n                        device_code: deviceCode,\r\n                        grant_type: 'device_code',\r\n                    },\r\n                    {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                    },\r\n                )\r\n                .then(({data}) => data)\r\n                .catch(error => {\r\n                    if (error instanceof AxiosError) {\r\n                        const err = error.response?.data\r\n                        if (err.error === 'authorization_pending') {\r\n                            return null\r\n                        } else {\r\n                            return err.error_description\r\n                        }\r\n                    }\r\n                })\r\n\r\n        let response = await getToken()\r\n\r\n        while (response === null) {\r\n            response = await new Promise(resolve => {\r\n                setTimeout(async () => {\r\n                    resolve(await getToken())\r\n                }, interval * 1100) // interval equal to 1 is equivalent to 1.1 seconds between one request and another\r\n            })\r\n        }\r\n\r\n\r\n        return response\r\n    }\r\n\r\n    getAuthorizationCodeURL(codeChallenge: string, state: string): string {\r\n        const queryParams = querystring.stringify({\r\n            response_type: 'code',\r\n            client_id: this.options.clientId,\r\n            redirect_uri: this.options.redirectUri,\r\n            state,\r\n            code_challenge: codeChallenge,\r\n            code_challenge_method: 'S256',\r\n        })\r\n        return `${this.options.host}/auth/?${queryParams}`\r\n    }\r\n\r\n    async getAuthorizationCodeToken(code: string | string[], codeVerifier: string | null): Promise<GetTokenResponse> {\r\n        return this.http\r\n            .post(\r\n                `/api/v4/oauth`,\r\n                {\r\n                    client_id: this.options.clientId,\r\n                    redirect_uri: this.options.redirectUri,\r\n                    grant_type: 'authorization_code',\r\n                    code,\r\n                    code_verifier: codeVerifier,\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                },\r\n            )\r\n            .then(({data}) => data).catch(err => {\r\n                throw new Error(err.message)\r\n            })\r\n    }\r\n\r\n    // TODO use v4 when all has updated GC2\r\n    async getPasswordToken(username: string, password: string, database: string): Promise<GetTokenResponse> {\r\n        return this.http\r\n            .post(\r\n                `/api/v3/oauth/token`,\r\n                {\r\n                    client_id: this.options.clientId,\r\n                    grant_type: 'password',\r\n                    username,\r\n                    password,\r\n                    database,\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                },\r\n            )\r\n            .then(({data}) => data)\r\n    }\r\n\r\n    async getRefreshToken(token: string): Promise<GetTokenResponse> {\r\n        return this.http\r\n            .post(\r\n                `/api/v4/oauth`,\r\n                {\r\n                    client_id: this.options.clientId,\r\n                    grant_type: 'refresh_token',\r\n                    refresh_token: token\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                },\r\n            ).then(({data}) => data).catch(err => {\r\n            })\r\n    }\r\n}\r\n"],"mappings":"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","names":["axios"]}