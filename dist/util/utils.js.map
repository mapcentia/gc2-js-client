{"version":3,"sources":["../../src/util/utils.ts"],"sourcesContent":["import {jwtDecode} from 'jwt-decode'\r\nimport {Gc2Service} from \"../services/gc2.services\";\r\n\r\nexport type Tokens = {\r\n    accessToken: string;\r\n    refreshToken: string;\r\n};\r\n\r\nexport type Options = {\r\n    redirectUri: string,\r\n    clientId: string,\r\n    host: string,\r\n}\r\n\r\nexport const generatePkceChallenge = async () => {\r\n\r\n    const generateRandomString = () => {\r\n        const array = new Uint32Array(28);\r\n        crypto.getRandomValues(array);\r\n        return Array.from(array, dec => ('0' + dec.toString(16)).substr(-2)).join('');\r\n    }\r\n\r\n    const sha256 = (plain: string | undefined) => {\r\n        const encoder = new TextEncoder();\r\n        const data = encoder.encode(plain);\r\n        return crypto.subtle.digest('SHA-256', data);\r\n    }\r\n\r\n    const base64urlencode = (str: ArrayBuffer) => {\r\n\r\n        return btoa(String.fromCharCode.apply(null, [...new Uint8Array(str)]))\r\n            .replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\r\n    }\r\n\r\n    async function pkceChallengeFromVerifier(v: string | undefined) {\r\n        const hashed = await sha256(v);\r\n        return base64urlencode(hashed);\r\n    }\r\n\r\n    const {state, codeVerifier} = {\r\n        state: generateRandomString(),\r\n        codeVerifier: generateRandomString(),\r\n    };\r\n    const codeChallenge = await pkceChallengeFromVerifier(codeVerifier);\r\n\r\n    return {\r\n        state,\r\n        codeVerifier,\r\n        codeChallenge,\r\n    }\r\n}\r\n\r\nexport const isTokenExpired = (token: string): boolean => {\r\n    let isJwtExpired = false\r\n    const {exp} = jwtDecode(token)\r\n    const currentTime = new Date().getTime() / 1000\r\n\r\n    if (exp) {\r\n        if (currentTime > exp) isJwtExpired = true\r\n    }\r\n    return isJwtExpired\r\n}\r\n\r\nexport const passwordIsStrongEnough = (password: string, allowNull: boolean = false) => {\r\n    const message = 'Entered password is too weak'\r\n    if (password === '' && allowNull) return true\r\n    if (password.length < 8) return message\r\n    if (!(/[A-Z]/.test(password))) return message\r\n    if (!(/[a-z]/.test(password))) return message\r\n    if (!(/\\d/.test(password))) return message\r\n    return true\r\n}\r\n\r\nexport const isLogin = async (gc2: Gc2Service): Promise<boolean> => {\r\n    const accessToken = localStorage.getItem('accessToken')\r\n    const refreshToken = localStorage.getItem('refreshToken')\r\n    if (!accessToken && !refreshToken) {\r\n        return false\r\n    }\r\n    if (!accessToken || (accessToken && isTokenExpired(accessToken))) {\r\n        if (refreshToken && isTokenExpired(refreshToken)) {\r\n            throw new Error('Refresh token has expired. Please login again.')\r\n        }\r\n        if (refreshToken) {\r\n            try {\r\n                const data = await gc2.getRefreshToken(refreshToken)\r\n                setTokens({accessToken: data.access_token, refreshToken})\r\n                console.log('Access token refreshed')\r\n            } catch (e) {\r\n                throw new Error('Could not get refresh token.')\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nexport const setTokens = (tokens: Tokens) => {\r\n    localStorage.setItem('accessToken', tokens.accessToken)\r\n    localStorage.setItem('refreshToken', tokens.refreshToken)\r\n}\r\n\r\nexport const setOptions = (options: Options ) => {\r\n    if (options.clientId) localStorage.setItem('clientId', options.clientId)\r\n    if (options.host) localStorage.setItem('host', options.host)\r\n    if (options.redirectUri) localStorage.setItem('redirectUri', options.redirectUri)\r\n}\r\n\r\nexport const getTokens = (): Tokens => {\r\n    return {\r\n        accessToken: localStorage.getItem('accessToken') || '',\r\n        refreshToken: localStorage.getItem('refreshToken') || '',\r\n    }\r\n}\r\nexport const getOptions = (): Options => {\r\n    return {\r\n        clientId: localStorage.getItem('clientId') || '',\r\n        host: localStorage.getItem('host') || '',\r\n        redirectUri: localStorage.getItem('redirectUri') || '',\r\n    }\r\n}\r\n\r\n\r\n"],"mappings":"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","names":[]}